#!/bin/bash
#
#-----  config de entorno de trabajo personal - Willians ppwj@yahoo.com   ---
#
#    Agregar esta linea  (if...fi) en:     .bashrc
#    
#  if [ -f ~/_myLinuxENV/config/workshop ]; then
#     source  ~/_myLinuxENV/config/workshop
#      echo -e "$ASTERISK Personal Workshop/environment enabled"
#   else
#      echo -e "$WARNING - Workshop is disabled, check files"
#  fi
#--

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac


. ~/_myLinuxENV/styles/setting 

# Directorio principal del entorno de trabajo para Docker
MSA="/msa"  # microservices environment

# Deployments  Docker
DEPLOY="/deployments"

# todos mis scripts para simplificar tareas
if [ -d "$HOME/_myscripts" ] ; then
    export PATH="$PATH:$HOME/_myscripts"
 fi

#if [ -d "$HOME/run" ] ; then
#   export PATH="$PATH:$HOME/run"
#fi



# lo mismo pero con algunos retoques
alias ll='clear && ls -lFh'
alias la='clear && ls -a'
alias l='clear && ls -lCFGh'
#alias vimg='vim.gtk'
#alias vi='nvim'
alias ..='cd ..'

# gestion rapida de containers, stop, start, remove
if [ -d "$DEPLOY/manage" ] ; then
   PATH="$PATH:$DEPLOY/manage"
fi

# mi area de trabajo docker
if [ -d "$MSA/cmt/" ] ; then
   PATH="$PATH:$MSA/cmt"
fi


#  entorno de Programacion Go
export PATH=$PATH:/usr/local/go/bin
export GOPATH="$HOME/Go_workspace"



# systemctl
alias sctlstatus='sudo systemctl "$@" status'
alias sctlstop='sudo systemctl "$@" stop'
alias sctlstart='sudo systemctl "$@" start'

# apt 
alias pkginstall='sudo aptitude install "$@"'
alias pkgreinstall='sudo aptitude reinstall'
alias pkgsearch='aptitude search "$@"'
alias pkgremove='sudo aptitude remove'
alias pkginfo='aptitude info'
alias pkgupdate='sudo aptitude update'


# Docker 
if [ -f /msa/cmt/deploy/complete-cms/addcms ]; then
   export PATH="$PATH:/msa/cmt/deploy/complete-cms/"
fi

# Comprobación rápida de diferencia/cambios en el archivo con respecto a mi laptop u oficina/PC
cmd=$(md5sum ~/_myLinuxENV/config/workshop)
echo -e "$cmd"

# install my favs apps
~/_myLinuxENV/pkg/check_apps


# my scripts ready to use it
export PATH="$PATH:~/_myLinuxENV/scripts"

# enable .vimrc
if [ -f ~/.vimrc ]; then
   echo -e "$ASTERISK .vimrc esta enlazado"
else
   if [ -f ~/linuxenv/_myLinuxENV/config/vimrc ]; then
      ln -s ~/linuxenv/_myLinuxENV/config/vimrc .vimrc
      echo -e "$ASTERISK .vimrc ha sido configurado"
   else
      echo -e "$ALERT .vimrc no pudo ser activado, el archivo no existe"
   fi
fi


# vim setting up
link_vim() {
    if [ ! -f ~/.vim/vimrc ]; then
       ln -s ~/linuxenv/_myLinuxENV/config/vimrc ~/.vim/vimrc
    fi
    echo -e "$ASTERISK .vim ha sido enlazado con el master" 
}
link_autoload() {

    if [ ! -d ~/.vim/autoload ]; then
	ln -s ~/linuxenv/_myLinuxENV/config/autoload ~/.vim/autoload
    fi
}
if [ -d ~/.vim ]; then

   link_vim
   link_autoload
else
   echo -e "$ALERT Directorio $YELLOW .vim $RST no existe."
   mkdir -p .vim
   echo -e "$ASTERISK Dir .vim creado!"

	link_vim
	link_autoload
fi


# enable .config/nvim/init.vim
link_initvim() {
   ln -s ~/linuxenv/_myLinuxENV/config/init.vim ~/.config/nvim/init.vim
}
if [ -f ~/.config/nvim/init.vim ]; then
   echo -e "$ASTERISK init.vim esta enlazado"
else
   # does init.vim exist?
   if [ -f ~/linuxenv/_myLinuxENV/config/init.vim ]; then
      # does the config dir exist? 
      if [ -d ~/.config/nvim ]; then

         link_initvim

      else 
         echo -e "$ALERT El directorio $YELLOW .config/nvim$RST no existe, ¡creado!"
         mkdir -p ~/.config/nvim

	link_initvim

      fi
      
         echo -e "$ASTERISK .config/nvim/init.vim ha sido configurado"

   else

      echo -e "$ALERT init.vim no pudo ser activado, el archivo no existe"

   fi
fi
